#!/usr/bin/python3

# noinspection PyUnresolvedReferences
import math, re, sys, itertools, functools, copy, json, threading, numpy
#sudo apt install python3-dev pypy3-dev python3-sortedcontainers python3-z3 python3-sympy python3-shapely python3-numpy
sys.setrecursionlimit(100000)
#from sortedcontainers import SortedList #python3 -mpip install install sortedcontainers #SortedList('bat') + 'cat'
#from astar import AStar #python3 -mpip install astar #see astarExample.py
#from collections import defaultdict, deque, Counter
#from z3 import * #python3 -mpip install install z3 z3-solver # s = Solver(); x = Real('x'); y = Real('y'); s.add([x <= 10, x >= 10]); print(s); print(s.check()) # if s.check()==z3.sat: print(int(str(s.model()[x]))) #don't use Int or Ints:  they are very slow
#import lmfit #sudo apt install python3-dev pypy3-dev libopenblas-dev gfortran && python3 -mpip install lmfit
#from sympy import * #python3 -mpip install sympy # x,y=symbols('x y'); print(solve([x <= 10, x >= 10]))
#from shapely import Polygon #print(Polygon([(0,0),(1,0),(1,1)]).area) #sudo apt install python3-dev pypy3-dev libgeos-dev && python3 -mpip install shapely

data1='''
............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............
'''.strip('\n').splitlines()
data2='''
....1.y.D...Y..........w....m.....................
..R..D..5....Y...1.........w.........G............
........R........D..o.............................
.............H......Y...w.....m...................
.......R..................3.........v.............
..1...D..5.........o................0.Bm..........
......5y.....o.........................3..........
....H...y......Z...............................0..
..............H.x..............m........w..g......
..........................A.......................
.........................................fg.......
...8.............v.....e............3B.....2......
.............5.....r......B.......2...........G..0
......................v....................3g.....
......P..............Y...c...........M.2.G........
..................................................
.....H....Z.............................K.......0.
....8d..Z......................u....X......f.g....
......d..P..r..............B.........E.........9..
.......r...........E..............q...M...........
...k...............v......Eb........q...........f.
.....R................b..............U.q9...2.....
.J......i.............M....q...................K..
..........d........................M.....A........
.......Zj..........h................9S............
.........j..........P..........Q....7.....c.......
.j........................a.......................
....j.6.....h.....F..a......L......c.X............
.................I.......a..b.............A......V
x........................p..........EK............
.......6.....................................X....
..J....................bf.....r.....K.............
.e..k................................7......X.....
...x..kP..................u...........U...........
J.8.....h....d........U....Q........F.c....iC.O...
...J...h.I..e......................i...7..........
..............................L.QU.....A......7...
...............k....t.........a.WO..i.............
.....4..6..............l...............T..........
........z...4.....p..........LS...Q...............
....e..z................t........pS..........C....
..............I........W.............9..........C.
..................l..........F...u...O............
....l............T.t.6...F.........S..s........V..
.......................t4.........................
.........z...........................CV....s......
..z.........IL.......W....p.........V...u.........
.....................l............................
........T.......................s.................
..........T..........4............................
'''.strip('\n').splitlines()

data=data2

#data = [int(line) for line in data]
#data = [[int(column) for column in re.findall('-?[\\d]+', line)] for line in data]
#data = [[int(column) for column in line] for line in data]
#data = [[int(column) for column in line.split(',')] for line in data]
data = [[column for column in line] for line in data]
#data = [threading.Thread(target=lambda line: print(line), args=(line)) for line in data] #line.start() line.join()
W,H=len(data[0]),len(data)



# answer=set()
# n={}
# for j in range(H):
# 	for i in range(W):
# 		a=data[j][i]
# 		if a=='.': continue
# 		if a not in n:
# 			n[a]=[]
# 		n[a].append((j, i))
#
# for a in n:
# 	for point in n[a]:
# 		for point2 in n[a]:
# 			if point == point2: continue
# 			jD = point[0]-point2[0]
# 			iD = point[1]-point2[1]
# 			newPoint = (point[0] + jD, point[1] + iD)
# 			if newPoint not in answer and newPoint[0]>=0 and newPoint[1]>=0 and newPoint[0]<W and newPoint[1]<H:
# 				answer.add(newPoint)
# print(len(answer))

answer=set()
n={}
for j in range(H):
	for i in range(W):
		a=data[j][i]
		if a=='.': continue
		if a not in n:
			n[a]=[]
		n[a].append((j, i))

for a in n:
	for point in n[a]:
		for point2 in n[a]:
			for r in range(100):
				if point == point2: continue
				jD = point[0]-point2[0]
				iD = point[1]-point2[1]
				newPoint = (point[0] + jD*r, point[1] + iD*r)
				if newPoint[0]<0 or newPoint[1]<0 or newPoint[0]>=W or newPoint[1]>=H:
					break
				if newPoint not in answer:
					answer.add(newPoint)
print(len(answer))



#dir = (dir+4)%4
#dx,dy = [(1,0),(0,1),(-1,0),(0,-1)][dir] #clockwise, starting right
#dir = 1 if dy==1 else 3 if dx==0 else 0 if dx==1 else 2 #clockwise, starting right
#dir = 'rdlu'.find(d.lower()) #clockwise, starting right
#dir = ['right', 'down', 'left', 'up'].index(d.lower()) #clockwise, starting right
#dir = '>v<^'.find(d.lower()) #clockwise, starting right

#data = [[column for column in line] for line in data]
#for j in range(H):
#	for i in range(W):
#		for dy in range(-1, 2):
#			for dx in range(-1, 2):
#				#if dx==0 and dy==0: continue
#				if dx==0 and dy==0 or dx!=0 and dy!=0: continue
#
#				newY,newX=j+dy,i+dx
#				if newY<0 or newX<0 or newY>=H or newX>=W: continue
#
#for line in data: print(''.join(line))

